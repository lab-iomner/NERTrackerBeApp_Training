@using Polly
<EditForm class="w-full space-y-2 py-2 px-2"  OnValidSubmit=@Save Model=@_model>
        <DataAnnotationsValidator  />
        <ValidationSummary/>
         <RadzenTextBox class=" w-full" @bind-Value=@_model.Region Placeholder="Region" />
        <RadzenTextBox class=" w-full" @bind-Value=@_model.GrantNumber Placeholder="Grant Number" />
        <RadzenDropDown class="w-full" @bind-Value=@_model.ServiceType Data=@_servcieTypes Placeholder="Service Type"/>
        <RadzenDropDown class="w-full" @bind-Value=@_model.Objectif Placeholder="Objectif"/>
        <RadzenNumeric class="w-full" @bind-Value=@_model.BenefHomme Placeholder="Beneficiaire Homme"/>
        <RadzenNumeric class="w-full" @bind-Value=@_model.BenefFemme Placeholder="Beneficiaire Femme"/>
        <div class="py-2">
            <RadzenButton class="m-1 px-2" type="submit" IsBusy=@_isBusy Icon="save" Text="Enregistrer" ButtonStyle="ButtonStyle.Secondary" />
         @if (IsNew())
        {
            <RadzenButton class="m-1 px-2" Click=@(_ => Cancel(false)) Icon="close" Text="Annuler" ButtonStyle="ButtonStyle.Light" />
        }
        else
        {
            <RadzenButton class="m-1 px-2" Click=@ConfirmDelete Icon="delete" Text="Supprimer" ButtonStyle="ButtonStyle.Danger" />
        }
        </div>
</EditForm>
<RadzenMediaQuery Query=@("(max-width: 768px)") Change=@(e => _isSmall = e)/>
@code {
    IEnumerable<string> _servcieTypes = new List<string>();
    [Parameter] public BenefTracker Model { get; set; } = new BenefTracker();

    [Inject] public NerTrackerDbContext NerTrackerDbContext { get; set; } = null!;
    [Inject] NotificationService NotificationService { get; set; } = null!;
    [Inject] DialogService DialogService { get; set; } = null!;

    [Parameter] public EventCallback<bool> CanRefresh { get; set; }

    bool _isSmall = false;
    bool _isBusy = false;
    bool IsNew() => Model.Id <= 0;

    void Cancel(bool canRefresh = false) => DialogService.Close(canRefresh);

    async Task Save()
    {
        _isBusy = true;
        Model.DFemme18_349 = _model.BenefFemme;
        if (IsNew())
        {
            await NerTrackerDbContext.AddAsync(Model);
        }
        else
        {
            NerTrackerDbContext.Update(Model);
        }
        var result = await NerTrackerDbContext.SaveChangesAsync();
        if (result > 0)
        {
            if (!_isSmall)
            {
                await CanRefresh.InvokeAsync(true);
                Model = new BenefTracker();
            }
            else
                Cancel(true);
        }
        _isBusy = false;
    }

    async Task ConfirmDelete()
    {
        var result = await DialogService
        .Confirm("Etes-vous sûre de vouloir supprimé?.", $"Supprimer {Model.Id}", new ConfirmOptions() { OkButtonText = "Oui", CancelButtonText = "Non" });
        if (result.Value == true)
            await Delete();
    }

    async Task Delete()
    {
        if (IsNew())
            return;
        _isBusy = true;

        NerTrackerDbContext.Remove(Model);
        var isDeleted = await NerTrackerDbContext.SaveChangesAsync();
        if (!_isSmall && isDeleted > 0)
        {
            await CanRefresh.InvokeAsync(isDeleted > 0);
            Model = new BenefTracker();
        }
        else
            Cancel(isDeleted > 0);
        _isBusy = false;
    }

}